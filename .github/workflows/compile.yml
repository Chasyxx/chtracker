name: Compilation

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  linux:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Update apt
      run: sudo apt-get update
    - name: Install SDL2, libfmt, and CMake
      run: sudo apt-get install libsdl2-dev libfmt-dev cmake

    - name: Go into build directory
      run: |
        mkdir build
        cd build
        pwd

    - name: Configure for Linux compilation
      run: cmake -DCMAKE_BUILD_TYPE=Release ..
    - name: make a Linux executable
      run: cmake --build . --config Release --parallel
    - name: Upload Linux executable
      uses: actions/upload-artifact@v4
      with:
        name: linux-elf
        retention-days: 30
        path: ./chtracker

  windows:
    runs-on: ubuntu-latest
    needs: linux
    steps:
      - uses: actions/checkout@v4

      - name: depenencies- set subroot path
        run: |
          cd ..
          echo "SUBROOT_PATH=$(pwd)" >> $GITHUB_ENV
          cd chtracker

      - name: depenencies- set cache key
        run: echo "CACHE_KEY=$(date +%Y-%V)" >> $GITHUB_ENV

      - name: Update apt
        run: sudo apt-get update
      - name: Install MinGW-w64 and CMake
        run: sudo apt-get install mingw-w64 cmake

      - name: dependencies- Cache libfmt
        id: cache-libfmt
        uses: actions/cache@v3
        with:
          path: /home/runner/work/chtracker/libfmt
          key: libfmt-${{ env.CACHE_KEY }}-chtracker

      - name: dependencies- Cache SDL2
        id: cache-sdl2
        uses: actions/cache@v3
        with:
          path: /home/runner/work/chtracker/libsdl
          key: libsdl-${{ env.CACHE_KEY }}-chtracker

      - name: Prepare toolchain file
        run: |
          pwd
          echo "set(CMAKE_SYSTEM_NAME Windows)" > ../toolchain-mingw64.cmake
          echo "set(CMAKE_SYSTEM_VERSION 1)" >> ../toolchain-mingw64.cmake
          echo "set(CMAKE_C_COMPILER x86_64-w64-mingw32-gcc)" >> ../toolchain-mingw64.cmake
          echo "set(CMAKE_CXX_COMPILER x86_64-w64-mingw32-g++)" >> ../toolchain-mingw64.cmake
          echo "set(CMAKE_FIND_ROOT_PATH /usr/x86_64-w64-mingw32)" >> ../toolchain-mingw64.cmake
          echo "set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)" >> ../toolchain-mingw64.cmake
          echo "set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)" >> ../toolchain-mingw64.cmake
          echo "set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)" >> ../toolchain-mingw64.cmake

      - if: ${{ steps.cache-libfmt.outputs.cache-hit != 'true' }}
        name: dependencies- Build libfmt
        run: |
          git clone https://github.com/fmtlib/fmt.git ../fmt
          mkdir ../libfmt
          mkdir ../fmt/build
          cd ../fmt/build
          pwd
          cmake -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_TOOLCHAIN_FILE=../../toolchain-mingw64.cmake \
              -DCMAKE_INSTALL_PREFIX=../../libfmt \
              -DBUILD_SHARED_LIBS=OFF \
              -DFMT_TEST=OFF ..
          cmake --build . --config Release --parallel
          cmake --install . --config Release
          cd ../../chtracker

      - if: ${{ steps.cache-sdl2.outputs.cache-hit != 'true' }}
        name: dependencies- Build SDL2
        run: |
          git clone -b SDL2 https://github.com/libsdl-org/SDL.git ../SDL
          mkdir ../libsdl
          mkdir ../SDL/build
          cd ../SDL/build
          pwd
          cmake -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_TOOLCHAIN_FILE=../../toolchain-mingw64.cmake \
              -DCMAKE_INSTALL_PREFIX=../../libsdl \
              -DBUILD_SHARED_LIBS=OFF \
              ..
          cmake --build . --config Release --parallel
          cmake --install . --config Release
          cd ../../chtracker

      - name: Go into build directory
        run: |
          mkdir build
          cd build
          pwd

      - name: configure for Windows cross-compilation
        run: cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=../../toolchain-mingw64.cmake -DCMAKE_PREFIX_PATH="${{ env.SUBROOT_PATH }}/libsdl;${{ env.SUBROOT_PATH }}/libfmt" ..
      - name: make a Windows executable
        run: cmake --build . --config Release --parallel
      - name: Prapare Windows EXE for uploading
        run: cat doc/MINGW_RUNTIME_LICENSE.txt | sed -e "/\/\/\//d" > MINGW_RUNTIME_LICENSE.txt
      - name: Upload Windows executable
        uses: actions/upload-artifact@v4
        with:
          name: windows-exe
          retention-days: 30
          path: |
            ./chtracker.exe
            ./MINGW_RUNTIME_LICENSE.txt
